# utility macros
#define TAG SYMBOL CODE
    [{SYMBOL}]
        {CODE}
    [/{SYMBOL}]
#enddef

# Deprecated, should be removed
#define THEN_deprecated CODE
    {TAG then ({CODE})}
#enddef

# parse the era data, both for multiplayer choice (era), menus and ai sources (faction)
#define DR_Faction NAME IMAGE LVLA LVLB LVLC LVLD LVLE
    [faction]
#        id={NAME}
        type={NAME}
        name={NAME}
        image={IMAGE}
        lvl0={LVLA}
        lvl1={LVLB}
        lvl2={LVLC}
        lvl3={LVLD}
        lvl4={LVLE}
    [/faction]
#enddef
#define DR_Era NAME IMAGE LVLA LVLB LVLC LVLD LVLE
    [multiplayer_side]
        id={NAME}
        name={NAME}
        image={IMAGE}
        {MAGENTA_IS_THE_TEAM_COLOR}
        recruit={LVLA}
        leader={LVLB}
        type=random
    [/multiplayer_side]
#enddef

# let's say you have 6 cards and you wish to randomly pick 4 *no duplicatas
#define DR_LIST_RND_INTO LIST NUMBER VAR
    {TAG set_variables (name,to_variable={VAR},{LIST})}
    {VARIABLE over "${LIST}.length|"}
    {VARIABLE_OP over add (-{NUMBER})}
    {REPEAT $over (
        {RANDOM 0.."$(${VAR}.length|-1)"}
        {CLEAR_VARIABLE {VAR}[$random]}
    )}
    {CLEAR_VARIABLE over}
#enddef

# some lua code:
# get extra attributes for unit types
#define LUA_GRAP_UNIT VAR
{FOREACH  ({VAR}) WW}
    [lua]
        code=<< local t = ...
        wesnoth.set_variable("unita.type", wesnoth.unit_types[t.unita].__cfg.id)
        wesnoth.set_variable("unita.name", wesnoth.unit_types[t.unita].__cfg.name)
        wesnoth.set_variable("unita.image", wesnoth.unit_types[t.unita].__cfg.image)
        wesnoth.set_variable("unita.gender", wesnoth.unit_types[t.unita].__cfg.gender)            >>
        [args]
            unita=${VAR}[$WW].id
        [/args]
    [/lua]
    {TAG set_variables (name,mode,to_variable={VAR}[$WW],merge,unita)}
    {CLEAR_VARIABLE unita}
{NEXT WW}
#enddef

# contains:               $name contains this string value.
# equals:                 $name is equal (string wise) to this value.
# not_equals:             $name is not equal (string wise) to this value.
# numerical_equals:       $name is equal (numerically) to this value.
# numerical_not_equals:   $name is not equal (numerically) to this value. *Using equals is faster. 
# greater_than:           $name is greater than this value.
# greater_than_equal_to:  $name is greater than or equal to this value.
# less_than:              $name is less than this value.
# less_than_equal_to:     $name is less than or equal to this value.
# boolean_equals:         $name has an equivalent boolean value. *
# boolean_not_equals:     $name does not have an equivalent boolean value. * 

# {FOR      QQ  0     lesser_than 5 add 1 (
#define FOR VAR ALPHA COND OMEGA OP POWER BODY_WML
   {VARIABLE {VAR} {ALPHA}}
    [while]
        [variable]
            name={VAR}
            {COND}={OMEGA}
        [/variable]
        [do]
            {BODY_WML}
            {VARIABLE_OP {VAR} {OP} {POWER}}
        [/do]
    [/while]
    {CLEAR_VARIABLE {VAR}}
#enddef
# {WHILE QQ less_than=5 (
#define WHILE VAR OP BODY_WML
    [while]
        [variable]
            name={VAR}
            {OP}
        [/variable]
        [do]
            {BODY_WML}
        [/do]
    [/while]
    {CLEAR_VARIABLE {VAR}}
#enddef
#########################################################################################
# Some personal conditional approach
# {IF x greater_than $y} {OR x less_than $y} {THEN (
#    ....
# ) ELSE ()}
#define IF VAR OP VALUE
    [if]
        {TAG variable (name,{OP}={VAR},{VALUE})}
#enddef
#define AND VAR OP VALUE
        {TAG and ({TAG variable (name,{OP}={VAR},{VALUE})} )}
#enddef
#define OR VAR OP VALUE
        {TAG or ({TAG variable (name,{OP}={VAR},{VALUE})} )}
#enddef

#define THEN TRUE ELSE FALSE
        {TAG then ({TRUE})}
        {TAG else ({FALSE})}
    [/if]
#enddef

#     [switch]
#         variable=bonus[$I].type
#         {CASE_IS (2) ( [replace_schedule] {DEFAULT_SCHEDULE_MORNING} [/replace_schedule] )}
#     [/switch]
#define CASE_IS VALUE WML
	[case]
		value={VALUE}
		{WML}
	[/case]
#enddef

# split an enumerated list "a,b,c" into an array
#define DR_split NAME LIST KEY
    [set_variables]
        name={NAME}
#       mode=replace
#       mode=append
        [split]
            list={LIST}
            key={KEY}
            separator=,
            remove_empty=yes
        [/split]
    [/set_variables]
#enddef
#define SET_VARS VAR VALUE
    [set_variables]
        name={VAR}
        [value]
            {VALUE}
        [/value]
    [/set_variables]
#enddef


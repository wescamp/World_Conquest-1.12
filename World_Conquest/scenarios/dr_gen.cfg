#define DR_GEN_storetiles
    [store_locations]
        variable=tiles
        x=2-$map_size.width
        y=2-$map_size.height
        [and]
            [not]
                terrain=K*
                radius=8
            [/not]
        [/and]
        [and]
            [not]
                terrain=*^V*,Wo,*^Xm,Xu,Ql
                #Gg^Vh,Ss^Vhs,Gs^Vht,Dd^Vda,Uu^Vud,Uu^Vu,Gg^Ve,Hh^Vhh,Mm^Vhh,Aa^Vha,Aa^Vha,Ww^Vm
                radius=1
            [/not]
        [/and]
    [/store_locations]
#enddef
# needs verificatons over here
#define DR_GEN_castle LEVEL XX YY
    [terrain_mask]
        mask=$map[{LEVEL}].data
        x="$({XX}-4)"
	y="$({YY}-3)"
        [rule]
            old=K*
            new=C*,X*,W*
            terrain=Ke
        [/rule]
        [rule]
            old=*^V*
            new=C*,X*,W*
            terrain=Gg^Vh
        [/rule]
    [/terrain_mask]
#enddef
#define DR_HEIGHT HEIGHT TERRAIN
    [height]
        height={HEIGHT}
        terrain={TERRAIN}
    [/height]
#enddef
#define DR_CONVERT MIN MAX MINT MAXT FROM TO
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature={MINT}
        max_temperature={MAXT}
        from={FROM}
        to={TO}
    [/convert]
#enddef
#define DR_ROAD FROM COST TO BRIDGE
    [road_cost]
        terrain={FROM}
        cost={COST}
        convert_to={TO}
        convert_to_bridge={BRIDGE}
    [/road_cost]
#enddef
#define DR_VILLAGE FROM TO RATE LIKE
    [village]
        terrain={FROM}
        convert_to={TO}
        adjacent_liked={LIKE}
        rating={RATE}
    [/village]
#enddef
#define DR_CASTLE TERRAIN DISTANCE
    [castle]
        valid_terrain={TERRAIN}
        min_distance={DISTANCE}
    [/castle]
#enddef

#define DR_NOISE OLD RND NEW
    [if]
        [have_location]
            x,y=$I,$J
            terrain={OLD}
        [/have_location]
        [then]
            {VARIABLE_OP random rand 0..{RND}}
            {VARIABLE terrain {NEW}}
        [/then]
    [/if]
#enddef
#define DR_DONTMIX TILE DIST TARG PROB RSLT
    [if]
        [have_location]
            x,y=$I,$J
            terrain={TILE}
        [/have_location]
        [have_location]
            [and]
                x,y=$I,$J
                radius={DIST}
            [/and]
            terrain={TARG}
        [/have_location]
        [then]
            {VARIABLE random {PROB} }
            {VARIABLE terrain {RSLT} }
        [/then]
    [/if]
#enddef
#define DR_GEN_HIDE OLD NEW
    [if]
        [have_location]
            x,y=$I,$J
            terrain={OLD}
        [/have_location]
        [then]
            {VARIABLE random 8}
            {VARIABLE terrain {NEW}}
        [/then]
    [/if]
#enddef
#define DR_GEN_MAP_NOISE TREE
    {TAG store_map_dimensions        variable=map_size}
    {VARIABLE I 1}
    {WHILE I less_than=$map_size.width (
            {VARIABLE J 2}
            {VARIABLE_OP I add 1}
            {VARIABLE random 0}
            {WHILE J less_than=$map_size.height (
                    {DR_NOISE	(Gs)			(8)	(Gs^Ft,Gs^Ft,Hh,Hh,Hh)}
                    {DR_NOISE	(Dd)			(9)	(Hd,Hd,Hd,Hd,Hd,Hd,Hd,Hd,Dd^Dr,Gs^Ft,Dd^Do)}
                    {DR_NOISE	(Gg)			(9)	({TREE},{TREE},Hh,Hh,Hh)}
                    {DR_NOISE	(Aa)			(9)	(Aa^Fpa,Aa^Fpa,Re,Ha,Ha,Ha)}
                    {DR_NOISE	(Uu,Uh,Uu^Uf)		(12)	(Re,Uu^Uf,Uh,Uu)}
                    {DR_NOISE	(Re^Uf)			(13)	(Re,Re,Re,Re,Ds)}
                    {DR_NOISE	(Mm)			(14)	(Gs,Gs,Gs,Gs,Hh,Hh,Hh,{TREE},{TREE},{TREE},Mm^Xm)}
                    {DR_NOISE	(Hh)			(18)	(Gs,Gs,Gs,Gs,Gs,Gs,{TREE},{TREE},{TREE},Mm)}
                    {DR_NOISE	(Ha)			(18)	(Aa,Aa,Aa,Aa,Re,Ai,Aa^Fpa,Aa^Fpa,Aa^Fpa,Mm)}
                    {DR_NOISE	(Gs^Fp,Gs^Ft,Gg^Fet)	(22)	(Gs,Gs,Gs,Gs,Gs,Gs,Gg^Fet,Hh,Hh,Hh,Hh)}
                    {DR_NOISE	(Aa^Fpa)		(22)	(Aa,Aa,Aa,Aa,Ai,Re,Gg^Fet,Ha,Ha,Ha,Ha)}
                    #{DR_GEN_HIDE (K*)	(Gg)}
                    {DR_DONTMIX (Ww)	(1)	(Ql,Qlf)	(8)	({TREE},Rd,Rd)}
                    {DR_DONTMIX (Wo)	(1)	(Ds,Dd)		(8)	(Ww,Ww)}
                    {DR_DONTMIX (Mm^Xm)	(1)	(Xu,Uu,Uh)	(8)	(Mm,Mm)}
                    #terrain=Xu && terrain=Uu,Uh,Uu^Uf && ! terrain=Uu,Uh,Uu^Uh,Xu
                    {IF random greater_than_equal_to 8} {THEN (
                            {VARIABLE_OP random rand $terrain}
                            {TAG terrain (x,y,terrain=$I,$J,$random)}
                    ) ELSE ()}
                    {VARIABLE_OP J add 1}
	    )}
    )}
    {CLEAR_VARIABLE J}
    {CLEAR_VARIABLE I}
#enddef

#define DR_gen_default TEMP SIZE
    villages=20				# frequency; 25 seems the average
    castle_size=1
    # geomorphology
    island_size=7				# 0-9: inland ... coastal ... island
    hill_size={SIZE}				# hill_size/50?
    iterations={TEMP}    			# iterations/3000?
    temperature_iterations={TEMP}
    temperature_size={SIZE}
    # rivers and lakes
    max_lakes=10
    min_lake_height=150
    lake_size=125
    river_frequency=100
    # human interventions
    roads=12
    road_windiness=4

    # Build the starting location castles
    {DR_CASTLE (Gs, Gg, Gs^Fp, Hh, Uu, Uh, Mm, Ds, Ww) (10)}

    #list of common terrain types which come in at different heights, from highest to lowest
    {DR_HEIGHT (900) 	(Uh)}		# Cave Hill
    {DR_HEIGHT (800) 	(Uu)}		# Cave
    {DR_HEIGHT (750) 	(Xu)}		# Cave wall
    {DR_HEIGHT (725) 	(Mm^Xm)}	# Impassable mountain
    {DR_HEIGHT (675) 	(Mm)}		# Mountain
    {DR_HEIGHT (550) 	(Hh)}		# Hills
    {DR_HEIGHT (100) 	(Gg)}		# Grass
    {DR_HEIGHT (30) 	(Ds)}		# Desert
    {DR_HEIGHT (1) 	(Ww)}		# Shallow water
    {DR_HEIGHT (0) 	(Wo)}		# Deep water

    #DR_CONVERT MIN_HT	MAX_HT	MIN_TMP	MAX_TMP	FROM			TO
    {DR_CONVERT (50)  (999)	(0)	(50)	(Ww, Wo)		(Ai)	} #water at cold becomes ice
    {DR_CONVERT (50)  (999)	(0)	(75)	(Gg, Ds)		(Aa)	} #at low temperatures, snow appears
    {DR_CONVERT (0)	  (999)	(0)	(100)	(Hh)			(Ha)	} #hills at cold get snow on them
    {DR_CONVERT (250) (400)	(500)	(800)	(Gg)			(Gs)	} #savannah appears on mod temp and high
    {DR_CONVERT (0)	  (200)	(400)	(700)	(Gg)			(Ss)	} #swamp appears on low land, at mod temp
    {DR_CONVERT (0)	  (999)	(320)	(420)	(Gg)			(Gg^Fp)	} #forest appears at moderate temperatures (used to be Gs)
    {DR_CONVERT (0)	  (999)	(320)	(420)	(Hh)			(Hh^Fp)	}
    {DR_CONVERT (0)	  (999)	(450)	(520)	(Gg,Gs)			(Gs^Ft)	} #jungle appears at mod high temperatures
    {DR_CONVERT (0)	  (999)	(450)	(520)	(Hh)			(Hh^Ft)	}
    {DR_CONVERT (825) (950)	(500)	(525)	(Uu, Uh)		(Uu^Uf)	} #fungus appears at med temp and high
    {DR_CONVERT (825) (950)	(550)	(575)	(Uu, Uh)		(Uu^Uf)	}
    {DR_CONVERT (825) (950)	(600)	(625)	(Uu, Uh)		(Uu^Uf)	}
    {DR_CONVERT (800) (999)	(850)	(999)	(Uu, Uh, Uu^Uf)		(Ql)	} #lava appears at extreme temp and height
    {DR_CONVERT (0  ) (999)	(800)	(999)	(Gg)			(Dd)	} #desert appears at extreme temperatures
    {DR_CONVERT (475) (550)	(800)	(999)	(Ds, Hh)		(Hd)	} #dunes at extreme temp and mod elevation

    #road costs
    {DR_ROAD (Gg) 	(10) 	(Rb) ()}
    {DR_ROAD (Ds) 	(25) 	(Rb) ()}
    {DR_ROAD (Gs^Fp) 	(20) 	(Rb) ()}
    {DR_ROAD (Gs^Ft)	(30) 	(Rb) ()}
    {DR_ROAD (Ww) 	(50) 	(Ch) (Ww^Bw|, Ww^Bw/, Ww^Bw\)}
    {DR_ROAD (Hh) 	(30) 	(Rb) ()}
    {DR_ROAD (Mm) 	(40) 	(Rb) ()}
    {DR_ROAD (Mm^Xm) 	(75) 	(Rb) ()}
    {DR_ROAD (Qxu) 	(100) 	(Cud) (Qxu^Bs|, Qxu^Bs/, Qxu^Bs\)}
    {DR_ROAD (Ql) 	(100) 	(Cud) (Ql^Bs|, Ql^Bs/, Ql^Bs\)}
    {DR_ROAD (Uu) 	(10) 	(Rb) ()}
    {DR_ROAD (Uh) 	(40) 	(Rb) ()}
    {DR_ROAD (Xu)	(90)	(Rb) ()}
    {DR_ROAD (Aa) 	(20) 	(Aa) ()}
    {DR_ROAD (Rb) 	(2) 	(Rb) ()}
    {DR_ROAD (Ww^Bw|) 	(2) 	(Ww^Bw|) ()}
    {DR_ROAD (Ww^Bw/) 	(2) 	(Ww^Bw/) ()}
    {DR_ROAD (Ww^Bw\) 	(2) 	(Ww^Bw\) ()}
    {DR_ROAD (Ch) 	(2) 	(Ch) ()}

    # Villages
    {DR_VILLAGE (Gg)	(Gg^Vh)		(8)
    (Gg, Ww, Ww, Ww, Ww, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rr, Rr, Re, Re, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    {DR_VILLAGE (Gs)	(Gs^Vht)	(5)
    (Gg, Gs, Ww, Ww, Ww, Ww, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rr, Rr, Re, Re, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    {DR_VILLAGE (Ds)	(Dd^Vda)	(2)
    (Gg, Gs, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rr, Rr, Re, Re, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    {DR_VILLAGE (Uu)	(Uu^Vud)	(4)
    (Re,Hh,Mm,Uu,Uh,Xu)}
    {DR_VILLAGE (Uh)	(Uu^Vu)		(3)
    (Re,Hh,Mm,Uu,Uh,Xu)}
    #villages in forest are Elvish
    {DR_VILLAGE (Gs^Fp)	(Gg^Ve)		(4)
    (Gg, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rb, Rb, Rb, Rb, Gg^Ve, Gg^Vh, Hh, Gs^Fp, Gs^Fp, Gs^Fp)}
    {DR_VILLAGE (Hh)	(Hh^Vhh)	(4)
    (Gg, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rb, Rb, Rb, Rb, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    {DR_VILLAGE (Mm)	(Mm^Vhh)	(3)
    (Gg, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rb, Rb, Rb, Rb, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    #villages in snow
    {DR_VILLAGE (Aa)	(Aa^Vha)	(3)
    (Gg, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rb, Rb, Rb, Rb, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    {DR_VILLAGE (Aa^Fpa) (Aa^Vha)	(3)
    (Gg, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rb, Rb, Rb, Rb, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    #swamp villages
    {DR_VILLAGE (Ss)	(Ss^Vhs)	(2)
    (Gg, Ww, Ww, Ww, Ww^Bw|, Ww^Bw/, Ww^Bw\, Rb, Rb, Rb, Rb, Gg^Ve, Gg^Vh, Hh, Gs^Fp)}
    #mermen villages - give them low chance of appearing
    {DR_VILLAGE (Ww)	(Ww^Vm)		(1)	(Ww, Ww)}
#enddef

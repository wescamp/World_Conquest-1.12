################################################################# Some more about dynamic sides
# The party can either way be spread aparts, or players will be gathered around the same starting position.
# We don't want useless empty castles spread far away on the map
# To properly simulate TL's original WC, we'll use $party to know the number of player's starting locations.
# The remaining should be filled with AIs.
# knowing the amount of players should set the starting scenario
# 
# 3 keeps/4 castles 	(TL's classic)	1 artifact/unit	split leaders
# 1 keeps/1 castles	(Nightmare)			split sides* (on castle upgrade?)	
# 6 keeps/1 castles	(Default)			split sides* (count players)
################################################################# DEFINE CUSTOM ENEMIES
#define DR_SIDE_SETAI AIS AILEVEL AIGOLD CASTLE
    # get rid of old leader, replace it with a new leader of the appropriate faction
    {VARIABLE_OP start_pos add 1}

    {IF max_player_start_pos equals {CASTLE}} {THEN (
        {VARIABLE start_pos {CASTLE}}) ELSE ()}
    {VARIABLE ai_gold {AIGOLD}}
    {VARIABLE ai_side 7}
    {VARIABLE_OP ("ai_side[0].fact_no") rand 0.."$($faction.length|-1)"}
    {VARIABLE_OP ("ai_side[1].fact_no") rand 0.."$($faction.length|-1)"}
    {VARIABLE_OP ("ai_side[2].fact_no") rand 0.."$($faction.length|-1)"}
    {REPEAT {AIS} (
        # look if we have a starting location left, if not, generate one with a castle
        {CLEAR_VARIABLE location}
        {IF_VAR start_pos greater_than {CASTLE} (
        [then]
            {RANDOM 0.."$($tiles.length|-1)"}
            {VARIABLE ("location.x") ("$tiles[$random].x")}
            {VARIABLE ("location.y") ("$tiles[$random].y")}
        [/then]
        [else]
            [store_starting_location]
                side=$start_pos
            [/store_starting_location]
            {VARIABLE_OP start_pos add 1}
        [/else]
        )}
        {DR_GEN_castle {AILEVEL} ($location.x) ($location.y)}
        # Create a random unit from a random faction; todo: modulo for same side
        #{VARIABLE fact_no ai_side[$($ai_side-7)].fact_no"}
        {VARIABLE_OP fact_no rand 0.."$($faction.length|-1)"}
        {VARIABLE_OP leaderx rand ("$faction[$fact_no|].lvl{AILEVEL}") }
        [unit]
            x,y=$location.x,$location.y
            type="$leaderx"
            side=$ai_side
            canrecruit=yes
            role=leader
            generate_name=yes
            ai_special=guardian
        [/unit]
        # recruit hack
        [allow_recruit]
            side=$ai_side
            type=$faction[$fact_no|].lvl0
        [/allow_recruit]
        # ai gold hack
        [gold]
            amount=$ai_gold
            side=$ai_side
        [/gold]
        {VARIABLE_OP ai_side add 1}
        {IF ai_side greater_than 9} {THEN (
            {VARIABLE_OP ai_gold add {AIGOLD}}
            {VARIABLE ai_side 7}               ) ELSE ()}
    )}
    {CLEAR_VARIABLE max_player_start_pos}
    {CLEAR_VARIABLE ai_gold}
    {CLEAR_VARIABLE fact_no}
    {CLEAR_VARIABLE leaderx}
    {CLEAR_VARIABLE ai_side}
#enddef


################################################################# store
#define DR_SIDE_store
    # store side, only used in restore (also in code, will be cleaned later)
    [store_side]
        side=1,2,3,4,5,6
    [/store_side]
    [store_unit]
        variable=wc_recall_store
        [filter]
            side=1,2,3,4,5,6
        [/filter]
    [/store_unit]
#enddef
# gold bonus based on villages owned
#define DR_GOLD_BONUS_commented SIDE
    [store_villages]
        variable=village_count
        owner_side={SIDE}
    [/store_villages]
    {VARIABLE gold_bonus "$village_count.length"}
    {VARIABLE_OP gold_bonus add 2}
    {VARIABLE_OP turns		add		1 }
    {VARIABLE_OP turns    	sub		$turn_number }
    {VARIABLE_OP gold_bonus 	multiply	$turns }
#enddef

################################################################# restore
#define WC_restore_units ARRAY X Y
        {FOREACH {ARRAY} U}
	    {VARIABLE {ARRAY}[$U].hitpoints ${ARRAY}[$U].max_hitpoints}
	    {VARIABLE {ARRAY}[$U].status.petrified no}
	    {VARIABLE {ARRAY}[$U].status.slowed    no}
	    {VARIABLE {ARRAY}[$U].status.uncovered no}
            {VARIABLE {ARRAY}[$U].status.poisoned  no}
            {VARIABLE {ARRAY}[$U].goto_x 0}
            {VARIABLE {ARRAY}[$U].goto_y 0}
	    {VARIABLE {ARRAY}[$U].moves ${ARRAY}[$U].max_moves}
            [unstore_unit]
                variable={ARRAY}[$U]
                x,y={X},{Y}
                find_vacant=yes
            [/unstore_unit]
        {NEXT U}
#enddef
#define DR_SIDE_restore TOTALSTARTPOS
#{WARNING ("DEBUG ALERT TRACE in restore")}
    {VARIABLE start_pos 1}
    # restore all units to recall list
    {WC_restore_units (wc_recall_store) (recall) (recall)}
    {FOREACH side I}
        # mark and store available starting positions
        [store_starting_location]
            side=$start_pos
        [/store_starting_location]
        {VARIABLE player[$I].x $location.x}
        {VARIABLE player[$I].y $location.y}
        {VARIABLE_OP start_pos add 1}
        {IF start_pos equals "{TOTALSTARTPOS}"} {THEN (
            {VARIABLE start_pos 1}
            {VARIABLE max_player_start_pos {TOTALSTARTPOS}} ) ELSE ()}
        {DR_GEN_castle  ("$player[$I].castle") ($location.x) ($location.y)}
        [recall]
            canrecruit=yes
	    x,y=$location.x,$location.y
	    side=$side[$I].side
        [/recall]
        {REPEAT 6 (
        [recall]
#            upkeep=yes
	    side=$side[$I].side
	    show=no
        [/recall])}
    {NEXT I}

    {CLEAR_VARIABLE wc_recall_store}
#{WARNING ("DEBUG ALERT TRACE out restore ... to be followed")}
#enddef

################################################################# traditional side declaration
#define DR_SIDE SIDE TEAM CTRL
    side={SIDE}
    gold=0
    team_name="{TEAM}"
    user_team_name={TEAM}
    fog=yes
    shroud=yes
    village_gold=1
    village_support=4
    controller="{CTRL}"
#enddef
#define DR_SIDE_PC SIDE OPTIONS
    [side]
        id=WCp{SIDE}
        save_id=WCp{SIDE}
        {DR_SIDE {SIDE} (_"Allies") human}
        share_view=yes
        persistent=yes
	{OPTIONS}
    [/side]
#enddef
#define DR_SIDE_AI SIDE
    [side]
        {DR_SIDE {SIDE} (_"Enemies") ai}
        allow_player=no
        disallow_observers=yes
        color=teal

        no_leader="yes"
        type=Galleon
    [/side]
#enddef
#define DR_SIDES OPTIONS
    {DR_SIDE_PC 1 {OPTIONS} }
    {DR_SIDE_PC 2 {OPTIONS} }
    {DR_SIDE_PC 3 {OPTIONS} }
    {DR_SIDE_PC 4 {OPTIONS} }
    {DR_SIDE_PC 5 {OPTIONS} }
    {DR_SIDE_PC 6 {OPTIONS} }
    {DR_SIDE_AI 7}
    {DR_SIDE_AI 8}
    {DR_SIDE_AI 9}
#enddef


################################################################# 
# the sacrilegious experimental trick for player side !!!!!!!!!!!!
# but wait a minute ... the gold bonus is still hard to balance mp vs sp
# the more, the merrier?
#define DR_SIDE_gather NUMBER_OF_RECRUITS STARTING_CASTLE_SIZE
    [store_side]
    	side=1,2,3,4,5,6
    [/store_side]
    {VARIABLE players 0}
    {FOREACH side x}
        # Fill in some initial variables
        {VARIABLE		("player[$x].castle")                	({STARTING_CASTLE_SIZE}) }		# Starting castle size
        {DR_split               ("player[$x].origin")                	("$side[$x].recruit")    (id) }		# Save original faction
        {DR_LIST_RND_INTO 	(player[$x].origin) 		     	({NUMBER_OF_RECRUITS}) (temp) }		# Select a few availlable recruits
        {LUA_GRAP_UNIT 		(player[$x].origin)}								# Save extra unit info
        {TAG set_recruit  (side,recruit=$side[$x].side,"")}							# Flush recruit list

        {FOREACH temp y}
            {TAG allow_recruit  (side,type=$side[$x].side,"$temp[$y].id")}
        {NEXT y}
        {FOREACH side y}
            {IF_VAR y greater_than $x (
            [then]
                {IF_VAR ("side[$x].name") equals ("$side[$y].name") (
                [then]
                    {MODIFY_UNIT (side="$side[$y].side") (overlays) 	("misc/leader-expendable.png") }
                    {MODIFY_UNIT (side="$side[$y].side") (side) 	("$side[$x].side") }
                [/then]
                )}
            [/then] )}
	{NEXT y}
	[if]
	    [have_unit]
                canrecruit=yes
		side=$side[$x].side
            [/have_unit]
	    [then]
                {VARIABLE_OP players add 1}
            [/then]
	[/if]
    {NEXT x}
    {CLEAR_VARIABLE side}
    {CLEAR_VARIABLE temp}
#enddef
